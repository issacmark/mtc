import paramiko

# Function to handle downloading files
def download_file(sftp_client, remote_path, local_path):
  try:
    sftp_client.get(remote_path, local_path)
    print(f"Download successful: {remote_path} -> {local_path}")
  except Exception as e:
    print(f"Download failed: {e}")

# Function to upload files
def upload_file(sftp_client, local_path, remote_path):
  try:
    sftp_client.put(local_path, remote_path)
    print(f"Upload successful: {local_path} -> {remote_path}")
  except Exception as e:
    print(f"Upload failed: {e}")

# Function to handle directory uploads (recursive)
def upload_folder(sftp_client, local_path, remote_path):
  for dirpath, dirnames, filenames in os.walk(local_path):
    # Create remote directory on the server if it doesn't exist
    remote_dir = os.path.join(remote_path, os.path.relpath(dirpath, local_path))
    try:
      sftp_client.mkdir(remote_dir)
    except OSError:
      pass  # Ignore errors if the directory already exists
    # Upload individual files within the directory
    for filename in filenames:
      local_file = os.path.join(dirpath, filename)
      remote_file = os.path.join(remote_dir, filename)
      upload_file(sftp_client, local_file, remote_file)

# Get user input
host = input("Enter SFTP server hostname: ")
username = input("Enter SFTP username: ")
password = input("Enter SFTP password: ")
operation = input("Enter operation (download/upload): ")
source_path = input("Enter source path (local or remote): ")  # User needs to specify full path
destination_path = input("Enter destination path (local or remote): ")  # User needs to specify full path

# Connect to SFTP server
try:
  client = paramiko.SSHClient()
  client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
  client.connect(hostname=host, username=username, password=password)
  sftp_client = client.open_sftp()
except Exception as e:
  print(f"Connection failed: {e}")
  exit(1)

# Perform download or upload operation
if operation.lower() == "download":
  download_file(sftp_client, source_path, destination_path)
elif operation.lower() == "upload":
  if os.path.isfile(source_path):
    upload_file(sftp_client, source_path, destination_path)
  elif os.path.isdir(source_path):
    upload_folder(sftp_client, source_path, destination_path)
  else:
    print(f"Error: Source path '{source_path}' is not a valid file or directory.")
else:
  print(f"Error: Invalid operation '{operation}'.")

# Close connection
sftp_client.close()
client.close()

print("Operation completed.")
