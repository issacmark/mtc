from ruamel.yaml import YAML
from ruamel.yaml.constructor import DuplicateKeyError
from collections import defaultdict

# Original YAML data with duplicate keys
data = """
key1:
  - value1
  - value2
key2:
  - value3
  - value4
key1:
  - value5
"""

# Create a YAML object with special settings to handle duplicate keys
yaml = YAML(typ='rt')  # 'rt' stands for RoundTrip to preserve data as is
yaml.preserve_quotes = True

# Use a defaultdict to handle duplicate keys and merge their values into lists
result = defaultdict(list)

try:
    yaml_data = yaml.load(data)

    # Populate the defaultdict with parsed YAML data, merging duplicates
    for key, value in yaml_data.items():
        result[key].extend(value)

except DuplicateKeyError as e:
    print(f"Duplicate key error: {e}. Handling duplicates...")

    # Manually parse the data to handle duplicate keys
    lines = data.strip().splitlines()
    for line in lines:
        if not line.startswith(" "):
            current_key = line.rstrip(":")
        else:
            value = line.strip(" -")
            result[current_key].append(value)

# Format the defaultdict to the desired format with square brackets
formatted_result = {k: f'["{", ".join(v)}"]' for k, v in result.items()}

# Print the formatted result
for key, value in formatted_result.items():
    print(f"{key}: {value}")
