import os
import paramiko

def download_folder(sftp, remote_folder, local_folder):
    try:
        # Create local folder if it doesn't exist
        os.makedirs(local_folder, exist_ok=True)

        # List files and directories in the remote folder
        files = sftp.listdir_attr(remote_folder)

        # Download each file or subfolder
        for item in files:
            remote_path = os.path.join(remote_folder, item.filename)
            local_path = os.path.join(local_folder, item.filename)
            if item.st_mode & 0o400:  # Regular file
                sftp.get(remote_path, local_path)
                print(f"Downloaded file: {item.filename}")
            elif item.st_mode & 0o200:  # Subfolder
                download_folder(sftp, remote_path, local_path)
                print(f"Downloaded subfolder: {item.filename}")

        print("Download completed successfully.")
    except Exception as e:
        print(f"Error downloading folder: {e}")

def upload_folder(sftp, local_folder, remote_folder):
    try:
        # List files and directories in the local folder
        items = os.listdir(local_folder)

        # Upload each file or subfolder
        for item in items:
            local_path = os.path.join(local_folder, item)
            remote_path = os.path.join(remote_folder, item)
            if os.path.isfile(local_path):
                sftp.put(local_path, remote_path)
                print(f"Uploaded file: {item}")
            elif os.path.isdir(local_path):
                sftp.mkdir(remote_path)
                upload_folder(sftp, local_path, remote_path)
                print(f"Uploaded subfolder: {item}")

        print("Upload completed successfully.")
    except Exception as e:
        print(f"Error uploading folder: {e}")

def main():
    # SFTP credentials and paths
    sftp_host = "your_sftp_hostname"
    sftp_port = 22
    sftp_username = "your_sftp_username"
    sftp_password = "your_sftp_password"
    remote_folder = "/path/to/remote/folder"
    local_folder = "/path/to/local/folder"

    try:
        # Establish an SFTP connection
        transport = paramiko.Transport((sftp_host, sftp_port))
        transport.connect(username=sftp_username, password=sftp_password)
        sftp = paramiko.SFTPClient.from_transport(transport)

        # Download or upload folder (choose one)
        # download_folder(sftp, remote_folder, local_folder)
        # upload_folder(sftp, local_folder, remote_folder)

        # Close the SFTP connection
        sftp.close()
        transport.close()
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()


#!/bin/bash

# Variables
sftp_user="your_sftp_username"
sftp_host="sftp.example.com"
file_path="/remote/path/to/your/file.txt"

# SFTP command to check if the file exists
check_file_command="ls $file_path"

# Connect to SFTP and run the command
if sftp -q "$sftp_user@$sftp_host" <<< "$check_file_command" 2>/dev/null; then
    echo "File exists."
else
    echo "File does not exist."
fi


import paramiko
import time

def download_file_with_retries(host, port, username, password, remote_file, local_file, max_retries=5, delay=10):
    # Initialize the SFTP connection
    transport = paramiko.Transport((host, port))
    transport.connect(username=username, password=password)
    sftp = paramiko.SFTPClient.from_transport(transport)

    attempt = 1
    while attempt <= max_retries:
        try:
            sftp.get(remote_file, local_file)
            print(f"File downloaded successfully on attempt {attempt}.")
            break
        except Exception as e:
            print(f"Attempt {attempt} failed: {e}")
            if attempt == max_retries:
                print(f"Failed to download the file after {max_retries} attempts.")
                break
            else:
                print(f"Retrying in {delay} seconds...")
                time.sleep(delay)
                attempt += 1

    # Close the SFTP connection
    sftp.close()
    transport.close()

# Example usage
download_file_with_retries(
    host="sftp.server.com",
    port=22,
    username="your_username",
    password="your_password",
    remote_file="/path/to/remote/file.txt",
    local_file="local_file.txt",
    max_retries=5,
    delay=10
)


# Define the SFTP details and local paths
$SftpServer = "sftp.example.com"
$SftpUser = "your_username"
$SftpPassword = "your_password"
$RemoteFolderPath = "/remote/path"
$LocalFolderPath = "C:\local\path"
$RepoUrl = "https://github.com/your-repo.git"

# Install PSSFTP module if not already installed
if (-not (Get-Module -ListAvailable -Name PSSFTP)) {
    Install-Module -Name PSSFTP -Force -Scope CurrentUser
}

# Import the PSSFTP module
Import-Module PSSFTP

# Connect to SFTP
$SftpSession = New-SFTPSession -ComputerName $SftpServer -Credential (New-Object System.Management.Automation.PSCredential($SftpUser, (ConvertTo-SecureString $SftpPassword -AsPlainText -Force)))

# Download change.yml and source_branch.txt
Get-SFTPFile -SessionId $SftpSession.SessionId -RemoteFile "$RemoteFolderPath/change.yml" -LocalPath "$LocalFolderPath\change.yml"
Get-SFTPFile -SessionId $SftpSession.SessionId -RemoteFile "$RemoteFolderPath/source_branch.txt" -LocalPath "$LocalFolderPath\source_branch.txt"

# Disconnect from SFTP
Remove-SFTPSession -SessionId $SftpSession.SessionId

# Read the branch name from source_branch.txt
$BranchName = Get-Content "$LocalFolderPath\source_branch.txt"

# Clone the Git repository from the specified branch
git clone -b $BranchName $RepoUrl "$LocalFolderPath\repo"

# Define the path within the cloned repository where terragrunt will be run
$TerragruntPath = "$LocalFolderPath\repo\path\to\terragrunt\directory"

# Change the directory to the specified path and run terragrunt plan
Set-Location -Path $TerragruntPath
terragrunt plan

# Restore the original working directory
Set-Location -Path $LocalFolderPath
