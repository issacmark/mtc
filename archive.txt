#!/bin/bash

# Your private token to authenticate with the GitLab API
PRIVATE_TOKEN="your_private_token"

# Base URL for your GitLab instance
GITLAB_URL="https://gitlab.example.com"

# Project name and group in the format "group/project"
PROJECT_FULL_PATH="ces/terraform-aws-acm"

# URL encode the project full path
ENCODED_PROJECT_NAME=$(echo $PROJECT_FULL_PATH | jq -sRr @uri)

# Make API call to get the project ID
PROJECT_ID=$(curl --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" "$GITLAB_URL/api/v4/projects/$ENCODED_PROJECT_NAME" | jq '.id')

if [ "$PROJECT_ID" != "null" ]; then
  echo "Archiving project ID $PROJECT_ID"
  # Archive the project
  curl --request POST --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" "$GITLAB_URL/api/v4/projects/$PROJECT_ID/archive"
else
  echo "Project $PROJECT_FULL_PATH not found"
fi


#!/bin/bash

# SFTP credentials and server details
SFTP_USER="username"
SFTP_HOST="sftp.example.com"
SFTP_PASSWORD="password"
FILE_PATH="/path/to/directory/yourfile.txt"
BATCH_FILE="sftp_commands.txt"

# Command to check file existence
echo "ls ${FILE_PATH}" > ${BATCH_FILE}

# Execute SFTP command and capture output
OUTPUT=$(sshpass -p "${SFTP_PASSWORD}" sftp -oBatchMode=no -b ${BATCH_FILE} ${SFTP_USER}@${SFTP_HOST} 2>/dev/null)

# Check if the file exists
if echo "${OUTPUT}" | grep -q "$(basename ${FILE_PATH})"; then
  echo "File exists."
else
  echo "File does not exist."
fi

# Clean up: Optionally remove the batch file
rm ${BATCH_FILE}


---
- name: Archive GitLab Projects
  hosts: localhost
  gather_facts: no
  vars:
    gitlab_url: "https://gitlab.example.com"
    gitlab_token: "your_gitlab_token"
    gitlab_group: "your_group_name"
    gitlab_projects:
      - "project1"
      - "project2"
      - "project3"

  tasks:
    - name: Get list of projects in the group
      uri:
        url: "{{ gitlab_url }}/api/v4/groups/{{ gitlab_group | urlencode }}/projects"
        method: GET
        headers:
          PRIVATE-TOKEN: "{{ gitlab_token }}"
        body_format: json
      register: project_list

    - name: Set project IDs to archive
      set_fact:
        projects_to_archive: "{{ project_list.json | selectattr('name', 'in', gitlab_projects) | map(attribute='id') | list }}"

    - name: Debug project IDs
      debug:
        msg: "Project IDs to archive: {{ projects_to_archive }}"

    - name: Archive GitLab project
      uri:
        url: "{{ gitlab_url }}/api/v4/projects/{{ item }}/archive"
        method: POST
        headers:
          PRIVATE-TOKEN: "{{ gitlab_token }}"
        status_code: [200, 201, 204]
      loop: "{{ projects_to_archive }}"
      register: archive_results

    - name: Output the result
      debug:
        msg: "Project ID {{ item.item }} archive result: {{ item.status }}"
      loop: "{{ archive_results.results }}"



