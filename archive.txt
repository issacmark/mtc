#!/bin/bash

# Your private token to authenticate with the GitLab API
PRIVATE_TOKEN="your_private_token"

# Base URL for your GitLab instance
GITLAB_URL="https://gitlab.example.com"

# Project name and group in the format "group/project"
PROJECT_FULL_PATH="ces/terraform-aws-acm"

# URL encode the project full path
ENCODED_PROJECT_NAME=$(echo $PROJECT_FULL_PATH | jq -sRr @uri)

# Make API call to get the project ID
PROJECT_ID=$(curl --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" "$GITLAB_URL/api/v4/projects/$ENCODED_PROJECT_NAME" | jq '.id')

if [ "$PROJECT_ID" != "null" ]; then
  echo "Archiving project ID $PROJECT_ID"
  # Archive the project
  curl --request POST --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" "$GITLAB_URL/api/v4/projects/$PROJECT_ID/archive"
else
  echo "Project $PROJECT_FULL_PATH not found"
fi


#!/bin/bash

# SFTP credentials and server details
SFTP_USER="username"
SFTP_HOST="sftp.example.com"
SFTP_PASSWORD="password"
FILE_PATH="/path/to/directory/yourfile.txt"
BATCH_FILE="sftp_commands.txt"

# Command to check file existence
echo "ls ${FILE_PATH}" > ${BATCH_FILE}

# Execute SFTP command and capture output
OUTPUT=$(sshpass -p "${SFTP_PASSWORD}" sftp -oBatchMode=no -b ${BATCH_FILE} ${SFTP_USER}@${SFTP_HOST} 2>/dev/null)

# Check if the file exists
if echo "${OUTPUT}" | grep -q "$(basename ${FILE_PATH})"; then
  echo "File exists."
else
  echo "File does not exist."
fi

# Clean up: Optionally remove the batch file
rm ${BATCH_FILE}

---
- name: Archive GitLab Projects with Pagination and Timestamp
  hosts: localhost
  gather_facts: no
  vars:
    gitlab_url: "https://gitlab.example.com"
    gitlab_token: "your_gitlab_token"
    gitlab_group: "your_group_name"
    gitlab_projects:
      - "project1"
      - "project2"
      - "project3"
    output_file: "/path/to/playbook_output.txt"
    per_page: 100

  tasks:
    - name: Initialize project list
      set_fact:
        all_projects: []

    - name: Fetch projects from all pages
      uri:
        url: "{{ gitlab_url }}/api/v4/groups/{{ gitlab_group | urlencode }}/projects?per_page={{ per_page }}&page={{ item }}"
        method: GET
        headers:
          PRIVATE-TOKEN: "{{ gitlab_token }}"
        body_format: json
      register: project_list
      loop: "{{ range(1, 100) | list }}"  # Assuming a maximum of 100 pages
      until: project_list.json | length == 0
      retries: 1
      delay: 0

    - name: Accumulate projects
      set_fact:
        all_projects: "{{ all_projects + project_list.json }}"

    - name: Set project IDs to archive
      set_fact:
        projects_to_archive: "{{ all_projects | selectattr('name', 'in', gitlab_projects) | map(attribute='id') | list }}"

    - name: Get current time
      set_fact:
        current_time: "{{ lookup('pipe', 'date +%Y-%m-%dT%H:%M:%S%z') }}"

    - name: Archive GitLab project
      uri:
        url: "{{ gitlab_url }}/api/v4/projects/{{ item }}/archive"
        method: POST
        headers:
          PRIVATE-TOKEN: "{{ gitlab_token }}"
        status_code: [200, 201, 204, 400]
      loop: "{{ projects_to_archive }}"
      register: archive_results

    - name: Output archive messages to file
      lineinfile:
        path: "{{ output_file }}"
        line: "Project ID {{ item.item }} archived at {{ current_time }} with status {{ item.status }} - Message: {{ item.json.message if item.json is defined else 'No error message' }}"
        create: yes
      loop: "{{ archive_results.results }}"




