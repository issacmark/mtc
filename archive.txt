#!/bin/bash

# Your private token to authenticate with the GitLab API
PRIVATE_TOKEN="your_private_token"

# Base URL for your GitLab instance
GITLAB_URL="https://gitlab.example.com"

# Project name and group in the format "group/project"
PROJECT_FULL_PATH="ces/terraform-aws-acm"

# URL encode the project full path
ENCODED_PROJECT_NAME=$(echo $PROJECT_FULL_PATH | jq -sRr @uri)

# Make API call to get the project ID
PROJECT_ID=$(curl --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" "$GITLAB_URL/api/v4/projects/$ENCODED_PROJECT_NAME" | jq '.id')

if [ "$PROJECT_ID" != "null" ]; then
  echo "Archiving project ID $PROJECT_ID"
  # Archive the project
  curl --request POST --header "PRIVATE-TOKEN: $PRIVATE_TOKEN" "$GITLAB_URL/api/v4/projects/$PROJECT_ID/archive"
else
  echo "Project $PROJECT_FULL_PATH not found"
fi


#!/bin/bash

# SFTP credentials and server details
SFTP_USER="username"
SFTP_HOST="sftp.example.com"
SFTP_PASSWORD="password"
FILE_PATH="/path/to/directory/yourfile.txt"
BATCH_FILE="sftp_commands.txt"

# Command to check file existence
echo "ls ${FILE_PATH}" > ${BATCH_FILE}

# Execute SFTP command and capture output
OUTPUT=$(sshpass -p "${SFTP_PASSWORD}" sftp -oBatchMode=no -b ${BATCH_FILE} ${SFTP_USER}@${SFTP_HOST} 2>/dev/null)

# Check if the file exists
if echo "${OUTPUT}" | grep -q "$(basename ${FILE_PATH})"; then
  echo "File exists."
else
  echo "File does not exist."
fi

# Clean up: Optionally remove the batch file
rm ${BATCH_FILE}


---
- name: Archive GitLab Projects by Group and Project Name
  hosts: localhost
  gather_facts: no
  vars:
    gitlab_url: "https://gitlab.com" # Change this to your GitLab instance URL if self-hosted
    gitlab_token: "your_personal_access_token" # Replace with your personal access token
    projects:
      - { group: "group1", project: "project1" }
      - { group: "group2", project: "project2" }
      - { group: "group3", project: "project3" }

  tasks:
    - name: Get project ID for each project
      uri:
        url: "{{ gitlab_url }}/api/v4/projects/{{ item.group }}%2F{{ item.project }}"
        method: GET
        headers:
          PRIVATE-TOKEN: "{{ gitlab_token }}"
        validate_certs: yes
      register: project_ids
      with_items: "{{ projects }}"
      failed_when: project_ids.status != 200

    - name: Set fact for project IDs
      set_fact:
        project_ids_list: "{{ project_ids_list | default([]) + [ { 'group': item.item.group, 'project': item.item.project, 'id': project_ids.results[item | index].json.id } ] }}"
      with_items: "{{ project_ids.results }}"
      when: item.status == 200

    - name: Archive the GitLab projects
      uri:
        url: "{{ gitlab_url }}/api/v4/projects/{{ item.id }}"
        method: PUT
        headers:
          PRIVATE-TOKEN: "{{ gitlab_token }}"
          Content-Type: "application/json"
        body: '{"archived": true}'
        body_format: json
        validate_certs: yes
      register: result
      with_items: "{{ project_ids_list }}"
      when: item.id is defined

    - name: Debug response for each project
      debug:
        msg: "Project {{ item.item.project }} in group {{ item.item.group }} archived with response: {{ item }}"
      with_items: "{{ result.results }}"
